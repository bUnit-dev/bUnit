@inherits TestComponentBase

<Fixture Setup="(fixture) => fixture.Services.AddMockJSRuntime()"
         Test="EmptyTodoListRendersCorrectly">
    <ComponentUnderTest>
        <TodoList>
            <ItemsTemplate>
                <TodoItem Todo=@context />
            </ItemsTemplate>
        </TodoList>
    </ComponentUnderTest>
    <Fragment Id="EmptyTodoListRender">
        <form>
            <div class="input-group">
                <input value="" type="text" class="form-control"
                       placeholder="Task description" aria-label="Task description" />
                <div class="input-group-append">
                    <button class="btn btn-secondary" type="submit">Add task</button>
                </div>
            </div>
        </form>
        <ol class="list-group"></ol>
    </Fragment>

    @code {
        void EmptyTodoListRendersCorrectly(Fixture fixture)
        {
            // Act - get the CUT
            var cut = fixture.GetComponentUnderTest<TodoList>();

            // Assert - get the expected initial rendered HTML from the fragment
            // and use it to verify the initial rendered HTML
            var expectedInitialRender = fixture.GetFragment("EmptyTodoListRender");
            cut.MarkupMatches(expectedInitialRender);
        }
    }
</Fixture>

<Fixture Setup="(fixture) => fixture.Services.AddMockJSRuntime()"
         Test="SettingLabelRendersCorrectly">
    <ComponentUnderTest>
        <TodoList>
            <ItemsTemplate>
                <TodoItem Todo=@context />
            </ItemsTemplate>
        </TodoList>
    </ComponentUnderTest>

    @code
    {
        void SettingLabelRendersCorrectly(Fixture fixture)
        {
            // Arrange - get the CUT
            var cut = fixture.GetComponentUnderTest<TodoList>();

            // Act - update label
            cut.SetParametersAndRender(builder => builder.Add(p => p.Label, "LABEL"));

            // Assert - verifiy that the placeholder and aria-label has changed
            cut.GetChangesSinceFirstRender().ShouldAllBe(
                diff => diff.ShouldBeAttributeChange("placeholder", "LABEL"),
                diff => diff.ShouldBeAttributeChange("aria-label", "LABEL")
            );
        }
    }
</Fixture>

<Fixture Setup="(fixture) => fixture.Services.AddMockJSRuntime()"
         Test="TaskListRendersItemsUsingItemTemplate">
    <ComponentUnderTest>
        <TodoList>
            <ItemsTemplate>
                <TodoItem Todo=@context />
            </ItemsTemplate>
        </TodoList>
    </ComponentUnderTest>

    <Fragment Id="TodoItemRender">
        <TodoItem Todo="@TestItems[0]" />
    </Fragment>

    @code
    {
        Todo[] TestItems { get; } = new[] { new Todo { Id = 42 } };

        void TaskListRendersItemsUsingItemTemplate(Fixture fixture)
        {
            // Arrange - get the cut and take a snapshot of the current render tree output
            var cut = fixture.GetComponentUnderTest<TodoList>();
            cut.SaveSnapshot();

            // Act - assign test todo items to the CUT
            cut.SetParametersAndRender(b => b.Add(p => p.Items, TestItems));

            // Assert - get the diffs since the snapshot and compare to the expected.
            var diffs = cut.GetChangesSinceSnapshot();
            var expected = fixture.GetFragment("TodoItemRender");
            diffs.ShouldHaveSingleChange().ShouldBeAddition(expected);
        }
    }
</Fixture>

@code {
    MockJSRuntimeInvokeHandler jsRtMock = default!;
    Todo? createdTodo;

    void OnAddingTodoHandler(Todo todo) => createdTodo = todo;

    void Setup(Fixture fixture)
    {
        jsRtMock = fixture.Services.AddMockJSRuntime();
    }
}

<Fixture Setup="Setup"
         Test="OnFirstRenderInputFieldGetsFocus">
    <ComponentUnderTest>
        <TodoList OnAddingTodo="OnAddingTodoHandler">
            <ItemsTemplate>
                <TodoItem Todo=@context />
            </ItemsTemplate>
        </TodoList>
    </ComponentUnderTest>

    @code
    {
        void OnFirstRenderInputFieldGetsFocus(Fixture fixture)
        {
            // Act
            var cut = fixture.GetComponentUnderTest<TodoList>();

            // Assert that there is a call to document.body.focus.call with a single argument,
            // a reference to the input element.
            jsRtMock.VerifyInvoke("document.body.focus.call")
                .Arguments.Single().ShouldBeElementReferenceTo(cut.Find("input"));
        }
    }
</Fixture>

<Fixture Setup="Setup"
         Test="AfterFirstRenderInputFieldDoesntGetFocusAfterRerenders">
    <ComponentUnderTest>
        <TodoList OnAddingTodo="OnAddingTodoHandler">
            <ItemsTemplate>
                <TodoItem Todo=@context />
            </ItemsTemplate>
        </TodoList>
    </ComponentUnderTest>
    @code
    {
        void AfterFirstRenderInputFieldDoesntGetFocusAfterRerenders(Fixture fixture)
        {
            // Arrange
            var cut = fixture.GetComponentUnderTest<TodoList>();

            // Act
            cut.Render(); // second render
            cut.Render(); // thrid render
            cut.Render(); // ...
            cut.Render();

            // Assert that focus logic only runs on first render (only called 1 time).
            jsRtMock.VerifyInvoke("document.body.focus.call", calledTimes: 1);
        }
    }
</Fixture>

<Fixture Setup="Setup"
         Test="WhenAddTaskFormIsSubmittedWithNoTextOnAddingTodoIsNotCalled">
    <ComponentUnderTest>
        <TodoList OnAddingTodo="OnAddingTodoHandler">
            <ItemsTemplate>
                <TodoItem Todo=@context />
            </ItemsTemplate>
        </TodoList>
    </ComponentUnderTest>
    @code
    {
        void WhenAddTaskFormIsSubmittedWithNoTextOnAddingTodoIsNotCalled(Fixture fixture)
        {
            // Arrange
            var cut = fixture.GetComponentUnderTest<TodoList>();

            // Act - submit the empty form
            cut.Find("form").Submit();

            // Assert - verify that no task was created
            Assert.Null(createdTodo);
        }
    }
</Fixture>

<Fixture Setup="Setup"
         Test="WhenAddTaskFormIsSubmittedWithTextOnAddingTodoIsCalled">
    <ComponentUnderTest>
        <TodoList OnAddingTodo="OnAddingTodoHandler">
            <ItemsTemplate>
                <TodoItem Todo=@context />
            </ItemsTemplate>
        </TodoList>
    </ComponentUnderTest>
    @code
    {
        void WhenAddTaskFormIsSubmittedWithTextOnAddingTodoIsCalled(Fixture fixture)
        {
            // Arrange - ensure createdTask is null
            var cut = fixture.GetComponentUnderTest<TodoList>();
            var taskValue = "HELLO WORLD TASK";

            // Act - find input field and change its value, then submit the form
            cut.Find("input").Change(taskValue);
            cut.Find("form").Submit();

            // Assert that a new task has been passed to the EventCallback listener and that the
            // new task has the expected value
            Assert.NotNull(createdTodo);
            Assert.Equal(taskValue, createdTodo?.Text);
        }
    }
</Fixture>
