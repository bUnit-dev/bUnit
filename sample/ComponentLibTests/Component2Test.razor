@using Microsoft.Extensions.DependencyInjection
@using Microsoft.JSInterop

@code{
    // Override AddServices to provide services used when renderinger
    protected override void AddServices(IServiceCollection services)
    {
        services.AddScoped<IJSRuntime>(_ => Mock.Of<IJSRuntime>());
    }

    // Use @ref to get a reference to the tested element
    Component1? sut1;

    // Add more than the default input/output html test in @code sections

    [Fact]
    public void CanReadPropFromSut()
    {
        sut1.AccessibleProp.ShouldBeTrue();
    }
}
<Fact>
    <Setup><Component1 @ref="@sut1" /></Setup>
    <ExpectedOutput>
        <div class="my-component">
            This Blazor component is defined in the <strong>ComponentLib</strong> package.
        </div>
    </ExpectedOutput>
</Fact>

@code {
    // Access rendered result of Fact elements in the RenderResults list.
    [Fact]
    public void AnotherTest()
    {
        var expectedText = "This Blazor component is defined in the ComponentLib package.";

        RenderResults[1].RenderedHtml.InnerText.Trim().ShouldBe(expectedText);
    }
}
<Fact>
    <Setup><Component1 /></Setup>
    <ExpectedOutput>
        <div class="my-component">
            This Blazor component is defined in the <strong>ComponentLib</strong> package.
        </div>
    </ExpectedOutput>
</Fact>