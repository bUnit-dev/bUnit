@code
{
	public ServiceProvider Services { get; }
	public ILoggerFactory LoggerFactory { get; }

	public TestRendererV2Test(ITestOutputHelper outputHelper)
	{
		var services = new ServiceCollection();
		services.AddXunitLogger(outputHelper);

		Services = services.BuildServiceProvider();
		LoggerFactory = Services.GetRequiredService<ILoggerFactory>();
	}

	private TestRendererV2 CreateSut() => new TestRendererV2(Services, LoggerFactory);

	[Fact]
	public void Renders_RenderFragment()
	{
		var sut = CreateSut();
		var wasCalled = false;

		sut.Render(b => { wasCalled = true; });

		wasCalled.ShouldBeTrue();
	}

	[Fact]
	public void Renders_completes_before_async_life_cycle_methods_finish()
	{
		var sut = CreateSut();
		var taskSource = new TaskCompletionSource();

		var renderedComponent = sut.Render(@<AsyncSetParametersComponent SetParameterDelay="taskSource.Task" />);

		// Better assertion here? does not block...
		renderedComponent.ShouldNotBeNull();
	}

	[Fact]
	public async Task RendersAsync_blocks_until_all_life_cycle_methods_are_completed()
	{
		var sut = CreateSut();
		var taskSource = new TaskCompletionSource();
		var tcsOnAfterRender = new TaskCompletionSource();

		var renderTask = sut.RenderAsync(
	@<Wrapper>
		<AsyncSetParametersComponent SetParameterDelay="taskSource.Task" />
		<AsyncLifeCycleMethods OnInitializedDelay="taskSource.Task">
			<AsyncLifeCycleMethods OnInitializedDelay="taskSource.Task" />
		</AsyncLifeCycleMethods>
		<AsyncLifeCycleMethods OnParametersSetDelay="taskSource.Task" />
		<AsyncLifeCycleMethods OnAfterRenderDelay="tcsOnAfterRender.Task" />
	</Wrapper>);

		renderTask.IsCompleted.ShouldBeFalse();
		taskSource.SetResult();
		await renderTask;
		renderTask.IsCompleted.ShouldBeTrue();
		tcsOnAfterRender.Task.IsCompleted.ShouldBeFalse();
	}

	[Theory]
	[InlineData("<h1>hello world</h1>")]
	[InlineData("<p>")]
	public void Render_with_raw_markup(string markup)
	{
		var sut = CreateSut();

		var renderedComponent = sut.Render(markup.ToRenderFragment());

		renderedComponent
			.Nodes
			.MarkupMatches(markup);
	}

	[Fact]
	public void Render_component()
	{
		var sut = CreateSut();

		var renderedComponent = sut.Render(@<Simple1 Header="foo" AttrValue="bar" />);

		renderedComponent
			.Nodes
			.MarkupMatches(@"<h1 id=""header"" attr=""bar"">foo</h1>");
	}
}
