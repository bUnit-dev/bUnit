@inherits TestComponentBase

<Fixture Setup="Setup1" Test="Test1" Tests="new Action<Fixture>[] { Test1_1 }">
    <ComponentUnderTest>
        <SimpleWithDeps />
    </ComponentUnderTest>
    <Fragment>
        <Simple1 />
    </Fragment>
</Fixture>
@code {
	class Dep1 : ITestDep { public string Name => nameof(Dep1); }
	ITestDep dep1Expected = new Dep1();

	void Setup1(Fixture fixture)
	{
		fixture.Services.AddSingleton<ITestDep>(dep1Expected);
		fixture.Services.AddXunitLogger();
	}

	void Test1(Fixture f)
	{
		f.GetComponentUnderTest<SimpleWithDeps>().Find("p").TextContent.ShouldBe(dep1Expected.Name);
		f.GetFragment<Simple1>().ShouldNotBeNull();
	}

	void Test1_1(Fixture f)
	{
		f.GetComponentUnderTest<SimpleWithDeps>().Find("p").TextContent.ShouldBe(dep1Expected.Name);
		f.GetFragment<Simple1>().ShouldNotBeNull();
	}

	Task TestAsync1(Fixture f)
	{
		f.GetComponentUnderTest<SimpleWithDeps>().Find("p").TextContent.ShouldBe(dep1Expected.Name);
		f.GetFragment<Simple1>().ShouldNotBeNull();
		return Task.CompletedTask;
	}
}

<Fixture Description="TADA" Setup="Setup2" Test="Test2" Tests="new Action<Fixture>[] { Test2_1 }">
    <ComponentUnderTest>
        <Wrapper />
    </ComponentUnderTest>
    <Fragment>
        <SimpleWithDeps />
    </Fragment>
</Fixture>
@code {
    class Dep2 : ITestDep { public string Name => nameof(Dep2); }
    ITestDep dep2Expected = new Dep1();

    void Setup2(Fixture f)
    {
        f.Services.AddSingleton<ITestDep>(dep2Expected);
    }

    void Test2(Fixture f)
    {
        f.GetComponentUnderTest<Wrapper>().ShouldNotBeNull();
        f.GetFragment<SimpleWithDeps>().Find("p").TextContent.ShouldBe(dep2Expected.Name);
    }

    void Test2_1(Fixture f)
    {
        f.GetComponentUnderTest<Wrapper>().ShouldNotBeNull();
        f.GetFragment<SimpleWithDeps>().Find("p").TextContent.ShouldBe(dep2Expected.Name);
    }
}

<SnapshotTest Description="Snapshot tests should have own context" Setup="s => s.Services.AddSingleton<ITestDep>(new Dep3())">
    <TestInput><SimpleWithDeps /></TestInput>
    <ExpectedOutput><p>@nameof(Dep3)</p></ExpectedOutput>
</SnapshotTest>

@code{
    class Dep3 : ITestDep { public string Name => nameof(Dep3); }
}
