name: "CI/CD"

on:
  pull_request:
    branches:
      - dev
      - main
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/**'
  push:
    branches:
      - dev
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/**'
  release:
    types:
      - published
  schedule:
    - cron: '0 0 * * 0'

jobs:
  dotnet-build:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Building library in release mode
        run: dotnet build -c Release -p:ContinuousIntegrationBuild=true

  dotnet-test:
    if: github.event_name != 'schedule'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        framework: [netcoreapp3.1, net5.0]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Running unit tests (linux, osx)
        if: matrix.os != 'windows-latest'
        run: dotnet test -c Debug --framework ${{ matrix.framework }} /p:UseSourceLink=true /p:CollectCoverage=true /p:CoverletOutput=./coverage/ /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute\"

      - name: Running unit tests (windows only)
        if: matrix.os == 'windows-latest'
        run: dotnet test -c Debug --framework ${{ matrix.framework }}

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v1

  verify-template:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - uses: nelonoel/branch-name@v1.0.1
      - name: Setting VERSION and BRANCH env
        run: |
          echo "VERSION=$NBGV_NuGetPackageVersion" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update tokens in project files
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["*.csproj", "**/*.csproj"]'

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Creating library package
        run: |
          dotnet restore
          dotnet pack src/bunit.core/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit.web/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit.template/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true

      - name: Verifying template
        run: |
          dotnet new --install ${GITHUB_WORKSPACE}/packages/bunit.template.$VERSION.nupkg
          dotnet new bunit --no-restore -o ${GITHUB_WORKSPACE}/TemplateTest
          dotnet restore ${GITHUB_WORKSPACE}/TemplateTest --source ${GITHUB_WORKSPACE}/packages --source https://api.nuget.org/v3/index.json
          dotnet test ${GITHUB_WORKSPACE}/TemplateTest

  sonarcloud:
    if: github.event_name != 'schedule' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - uses: nelonoel/branch-name@v1.0.1

      - name: Setting VERSION and BRANCH env
        run: |
          echo "VERSION=$NBGV_NuGetPackageVersion" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: ⚙️ Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner
      - name: Running dotnet-sonarscanner
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"egil_bUnit" /o:"egil" /n:"bUnit" /v:"$NBGV_NuGetPackageVersion" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url=https://sonarcloud.io /d:sonar.branch.name="$BRANCH" /d:sonar.verbose="true" /d:sonar.cs.opencover.reportsPaths="tests/**/coverage/*.opencover.xml"
          dotnet build
          dotnet test /p:CollectCoverage=true /p:CoverletOutput=./coverage/ /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute\"
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"

  code-ql:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 0

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: csharp
          config-file: ./.github/codeql/codeql-config.yml

      - name: Building library
        run: dotnet build -p:ContinuousIntegrationBuild=true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  publish-nuget-packages:
    if: github.event_name == 'push' || github.event_name == 'release'
    needs: [dotnet-build, dotnet-test, verify-template]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - uses: nelonoel/branch-name@v1.0.1
      - name: Setting VERSION and BRANCH env
        run: |
          echo "VERSION=$NBGV_NuGetPackageVersion" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update tokens in project files
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["*.csproj", "**/*.csproj"]'

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Creating library package for pre-release
        if: github.ref != 'refs/heads/main' && github.event_name != 'release'
        run: |
          dotnet pack -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit.template/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true

      - name: Creating library package for release
        if: github.ref == 'refs/heads/main' || github.event_name == 'release'
        run: |
          dotnet pack -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true /p:PublicRelease=true
          dotnet pack src/bunit/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true /p:PublicRelease=true
          dotnet pack src/bunit.template/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true /p:PublicRelease=true

      - name: Push packages to GitHub Package Registry
        run: dotnet nuget push ${GITHUB_WORKSPACE}/packages/'*.nupkg' -k ${{ secrets.GITHUB_TOKEN }} -s https://nuget.pkg.github.com/egil/index.json --skip-duplicate --no-symbols true

      - name: Push packages to NuGet
        if: github.ref == 'refs/heads/main' || github.event_name == 'release'
        run: dotnet nuget push ${GITHUB_WORKSPACE}/packages/'*.nupkg' -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate --no-symbols true
