name: "CI/CD"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/**'
  push:
    branches:
      - dev
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/**'
  release:
    types:
      - published
  schedule:
    - cron: '0 0 * * 0'

jobs:
  dotnet-build:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.100-rc.1.20452.10'

      - name: Building library in release mode
        run: dotnet build -c Release -p:ContinuousIntegrationBuild=true

  dotnet-test:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.100-rc.1.20452.10'

      - name: Running unit tests
        run: |
          dotnet build -c Debug /nowarn:CS1591  /p:UseSourceLink=true
          dotnet test -c Debug --no-build /nowarn:CS1591 /p:CollectCoverage=true /p:CoverletOutput=./coverage/ /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute\" /p:UseSourceLink=true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1

  verify-template:
    if: github.event_name != 'schedule'
    env:
      BRANCH: ''
      VERSION: ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Setting VERSION and BRANCH env
        run: |
          echo "::set-env name=VERSION::$NBGV_NuGetPackageVersion"
          echo "::set-env name=BRANCH::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"

      - name: Update tokens in project files
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["*.csproj", "**/*.csproj"]'

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.100-rc.1.20452.10'

      - name: Creating library package
        run: |
          dotnet restore
          dotnet pack src/bunit.core/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit.web/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit.xunit/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit.template/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true

      - name: Verifying template
        run: |
          dotnet new --install ${GITHUB_WORKSPACE}/packages/bunit.template.$VERSION.nupkg
          dotnet new bunit --no-restore -o ${GITHUB_WORKSPACE}/TemplateTest
          dotnet restore ${GITHUB_WORKSPACE}/TemplateTest --source ${GITHUB_WORKSPACE}/packages --source https://api.nuget.org/v3/index.json
          dotnet test ${GITHUB_WORKSPACE}/TemplateTest

  dotnet-format:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.100-rc.1.20452.10'

      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format

      - name: Run dotnet-format
        run: dotnet format ./bunit.sln --verbosity diag

      - name: Commit formatted files
        uses: EndBug/add-and-commit@v4.1.0
        with:
          add: '.'
          author_name: Github Actions
          author_email: actions@github.com
          message: Automated dotnet-format update
          ref: ${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sonarcloud:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Create sonar-project.properties
      run: echo -n -e "sonar.organization=egil\nsonar.projectKey=egil_bUnit\nsonar.sources=./src\nsonar.tests=./tests\n" > sonar-project.properties

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  code-ql:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 0

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.100-rc.1.20452.10'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: csharp
        config-file: ./.github/codeql/codeql-config.yml

    - name: Building library
      run: dotnet build -p:ContinuousIntegrationBuild=true

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  publish-nuget-packages:
    if: (github.event_name == 'push' && github.ref == 'refs/heads/dev') || github.event_name == 'release'
    needs: [dotnet-build, dotnet-test, verify-template]
    runs-on: ubuntu-latest
    env:
      VERSION: ''
      BRANCH: ''
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Setting VERSION and BRANCH env
        run: |
          echo "::set-env name=VERSION::$NBGV_NuGetPackageVersion"
          echo "::set-env name=BRANCH::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"

      - name: Update tokens in project files
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["*.csproj", "**/*.csproj"]'

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.100-rc.1.20452.10'

      - name: Creating library package for pre-release
        if: github.event_name != 'release'
        run: |
          dotnet pack -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
          dotnet pack src/bunit.template/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true

      - name: Creating library package for release
        if: github.event_name == 'release'
        run: |
          dotnet pack -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=main -p:ContinuousIntegrationBuild=true /p:PublicRelease=true
          dotnet pack src/bunit/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=main -p:ContinuousIntegrationBuild=true /p:PublicRelease=true
          dotnet pack src/bunit.template/ -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=main -p:ContinuousIntegrationBuild=true /p:PublicRelease=true

      - name: Push packages to GitHub Package Registry
        run: |
           for f in ${GITHUB_WORKSPACE}/packages/*.nupkg
           do
             curl -vX PUT -u "egil:${{ secrets.GITHUB_TOKEN }}" -F package=@$f https://nuget.pkg.github.com/egil/
           done
        shell: bash

      - name: Push packages to NuGet
        if: github.event_name == 'release'
        run: dotnet nuget push ${GITHUB_WORKSPACE}/packages/'*.nupkg' -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate --no-symbols true

#      - name: Push packages to GitHub Package Registry
#        run: dotnet nuget push ${GITHUB_WORKSPACE}/packages/'*.nupkg' --skip-duplicate
