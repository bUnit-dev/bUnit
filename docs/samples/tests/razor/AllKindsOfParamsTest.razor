@inherits TestComponentBase

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <NonBlazorTypesParams Numbers="42" Lines=@(new List<string> { "Hello", "World" }) />
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <EventCallbackParams OnClick=@(args => { /* handle callback */ }) 
                         OnSomething=@(() => { /* handle callback */ }) />
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <ChildContentParams>
      <h1>Hello World</h1>
    </ChildContentParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <ChildContentParams>
      <Counter />
    </ChildContentParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <ChildContentParams>
      <Alert Heading="Alert heading" Type="AlertType.Warning">
        <p>Hello World</p>
      </Alert>
    </ChildContentParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <ChildContentParams>
      <h1>Below you will find a most interesting alert!</h1>
      <Alert Heading="Alert heading" Type="AlertType.Warning">
        <p>Hello World</p>
      </Alert>
    </ChildContentParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <RenderFragmentParams>
      <Content>
        <h1>Hello World</h1>
      </Content>
    </RenderFragmentParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <RenderFragmentParams>
      <Content>
        <Counter />
      </Content>
    </RenderFragmentParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <RenderFragmentParams>
      <Content>
        <Alert Heading="Alert heading" Type="AlertType.Warning">
          <p>Hello World</p>
        </Alert>
      </Content>
    </RenderFragmentParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <RenderFragmentParams>
      <Content>
        <h1>Below you will find a most interesting alert!</h1>
        <Alert Heading="Alert heading" Type="AlertType.Warning">
          <p>Hello World</p>
        </Alert>
      </Content>
    </RenderFragmentParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <TemplateParams Items=@(new string[]{ "Foo", "Bar", "Baz" }) TItem="string">
      <Template>
        <span>@context</span>
      </Template>
    </TemplateParams>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <TemplateParams Items=@(new string[]{ "Foo", "Bar", "Baz" }) TItem="string">
      <Template>
          <Item Value=@context></Item>
      </Template>
    </TemplateParams>
  </ComponentUnderTest>
</Fixture>


<Fixture Test="f => {}">
  <ComponentUnderTest>
    <UnmatchedParams some-unknown-param="a value" />
  </ComponentUnderTest>
</Fixture>


<Fixture Test="f => {}">
  <ComponentUnderTest>
    <CascadingValue Value="true"> @* isDarkMode *@
      <CascadingParams />
    </CascadingValue>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <CascadingValue Name="LoggedInUser" Value=@("Egil Hansen")>
      <CascadingParams />
    </CascadingValue>
  </ComponentUnderTest>
</Fixture>

<Fixture Test="f => {}">
  <ComponentUnderTest>
    <CascadingValue Value="true"> @* isDarkMode *@
      <CascadingValue Name="LoggedInUser" Value=@("Egil Hansen")>
        <CascadingValue Name="LoggedInEmail" Value=@("egil@example.com")>
          <CascadingParams />
        </CascadingValue>
      </CascadingValue>
    </CascadingValue>
  </ComponentUnderTest>
</Fixture>